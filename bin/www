#!/usr/bin/env node

/**
 * Module dependencies.
 */

global.pics = [];
global.conf = require(__dirname + '/../config');

var debug = require('debug')('dev:lin:server');
// var http = require('http');
var https = require('https');
var fs = require('fs');
var async = require("async");
var port = normalizePort(process.env.PORT || conf.port);
/**
 * Get port from environment and store in Express.
 */


/**
 * Create HTTP server.
 */

// var server = http.createServer(app);
async.waterfall([
  function ( cb) {
    require( __dirname + "/../libs/mongo")( conf.mongodb, function () {
      cb();
    });
  },
  function ( cb) {
    var app = require('../app');
    app.set('port', port);
    var server = https.createServer({
      hostname: conf.hostname,
      requestCert: true, 
      key: fs.readFileSync( __dirname + "/../key/private.key"),
      cert: fs.readFileSync( __dirname + "/../key/certificate.crt"),
      ca: fs.readFileSync( __dirname + "/../key/ca_bundle.crt")
    }, app);
    server.listen( port);
    server.on('error', onError);
    server.on('listening', function () {
      debug('Listening on ' + port);
    });
    cb();
  }
], function ( err) {
  if ( err) {
    debug( err);
  }
  debug( "server init");
});
/**
 * Listen on provided port, on all network interfaces.
 */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
